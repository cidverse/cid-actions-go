package cosignsign

import (
	"testing"

	"github.com/cidverse/cid-actions-go/pkg/core/test"
	"github.com/cidverse/cid-actions-go/testdata"
	cidsdk "github.com/cidverse/cid-sdk-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
)

func TestContainerSignPrivateKey(t *testing.T) {
	sdk := test.Setup(t)
	sdk.On("ModuleAction", mock.Anything).Return(testdata.ModuleDockerfile(), nil).Run(func(args mock.Arguments) {
		arg := args.Get(0).(*SignConfig)
		arg.CosignMode = "PRIVATEKEY"
		arg.CosignKey = "LS0tLS1CRUdJTiBFTkNSWVBURUQgQ09TSUdOIFBSSVZBVEUgS0VZLS0tLS0KZXlKclpHWWlPbnNpYm1GdFpTSTZJbk5qY25sd2RDSXNJbkJoY21GdGN5STZleUpPSWpvek1qYzJPQ3dpY2lJNgpPQ3dpY0NJNk1YMHNJbk5oYkhRaU9pSk1hQzlFVW1ReVZYQTNWMUp0Vnpac2RHcEdSazFGU1docWQwWTFhMmhJCkt6TlZWbVZXWlhKTVQydzBQU0o5TENKamFYQm9aWElpT25zaWJtRnRaU0k2SW01aFkyd3ZjMlZqY21WMFltOTQKSWl3aWJtOXVZMlVpT2lKNFJqQkJNMVJIVUZsSU1GVnBLMDVwTTNRdlpqWk1SVmxVYmxCNWIzQlBWU0o5TENKagphWEJvWlhKMFpYaDBJam9pYlVGc2VHbzJkekl6ZGxwa2NrUldObTF2ZUZKRk5ISXpiRTFwZGpCcE1HMWlTM0kxCk1saEpkMWt2ZEc1d2FrTkVlQzlPY1RSRlpqa3JaWEJ1V2swdldGRmxWR3h2Y0c1WFYzSmlkVmR3ZWs1QmVtTXkKZEhNeFJYSlpORloxY3pCWGJuQndURGx3YUZoQlkydENNa3BaUm5ST1NXNTFhbEEwZWpsU1dVaHdhbXQxZVZwRQpWSGh3V0V0dVNHRmtlRkZwVjNkeWFsRmxlbUZ5ZGt3ek1rTXlSWEJGVDBZM1NWTjRUVTlMWVVsT01XSkVTV2hDCk1VcFRUVTVETTFCVE1VMHJkRWMwT0dGVWMwZFRWRzVhYzFFOVBTSjkKLS0tLS1FTkQgRU5DUllQVEVEIENPU0lHTiBQUklWQVRFIEtFWS0tLS0tCg=="
		arg.CosignPassword = "123456"
		arg.CosignTransparencyLogDisable = false
	})
	sdk.On("FileWrite", "/my-project/.tmp/private.key", []byte{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x45, 0x44, 0x20, 0x43, 0x4f, 0x53, 0x49, 0x47, 0x4e, 0x20, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x20, 0x4b, 0x45, 0x59, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x65, 0x79, 0x4a, 0x72, 0x5a, 0x47, 0x59, 0x69, 0x4f, 0x6e, 0x73, 0x69, 0x62, 0x6d, 0x46, 0x74, 0x5a, 0x53, 0x49, 0x36, 0x49, 0x6e, 0x4e, 0x6a, 0x63, 0x6e, 0x6c, 0x77, 0x64, 0x43, 0x49, 0x73, 0x49, 0x6e, 0x42, 0x68, 0x63, 0x6d, 0x46, 0x74, 0x63, 0x79, 0x49, 0x36, 0x65, 0x79, 0x4a, 0x4f, 0x49, 0x6a, 0x6f, 0x7a, 0x4d, 0x6a, 0x63, 0x32, 0x4f, 0x43, 0x77, 0x69, 0x63, 0x69, 0x49, 0x36, 0xa, 0x4f, 0x43, 0x77, 0x69, 0x63, 0x43, 0x49, 0x36, 0x4d, 0x58, 0x30, 0x73, 0x49, 0x6e, 0x4e, 0x68, 0x62, 0x48, 0x51, 0x69, 0x4f, 0x69, 0x4a, 0x4d, 0x61, 0x43, 0x39, 0x45, 0x55, 0x6d, 0x51, 0x79, 0x56, 0x58, 0x41, 0x33, 0x56, 0x31, 0x4a, 0x74, 0x56, 0x7a, 0x5a, 0x73, 0x64, 0x47, 0x70, 0x47, 0x52, 0x6b, 0x31, 0x46, 0x53, 0x57, 0x68, 0x71, 0x64, 0x30, 0x59, 0x31, 0x61, 0x32, 0x68, 0x49, 0xa, 0x4b, 0x7a, 0x4e, 0x56, 0x56, 0x6d, 0x56, 0x57, 0x5a, 0x58, 0x4a, 0x4d, 0x54, 0x32, 0x77, 0x30, 0x50, 0x53, 0x4a, 0x39, 0x4c, 0x43, 0x4a, 0x6a, 0x61, 0x58, 0x42, 0x6f, 0x5a, 0x58, 0x49, 0x69, 0x4f, 0x6e, 0x73, 0x69, 0x62, 0x6d, 0x46, 0x74, 0x5a, 0x53, 0x49, 0x36, 0x49, 0x6d, 0x35, 0x68, 0x59, 0x32, 0x77, 0x76, 0x63, 0x32, 0x56, 0x6a, 0x63, 0x6d, 0x56, 0x30, 0x59, 0x6d, 0x39, 0x34, 0xa, 0x49, 0x69, 0x77, 0x69, 0x62, 0x6d, 0x39, 0x75, 0x59, 0x32, 0x55, 0x69, 0x4f, 0x69, 0x4a, 0x34, 0x52, 0x6a, 0x42, 0x42, 0x4d, 0x31, 0x52, 0x48, 0x55, 0x46, 0x6c, 0x49, 0x4d, 0x46, 0x56, 0x70, 0x4b, 0x30, 0x35, 0x70, 0x4d, 0x33, 0x51, 0x76, 0x5a, 0x6a, 0x5a, 0x4d, 0x52, 0x56, 0x6c, 0x55, 0x62, 0x6c, 0x42, 0x35, 0x62, 0x33, 0x42, 0x50, 0x56, 0x53, 0x4a, 0x39, 0x4c, 0x43, 0x4a, 0x6a, 0xa, 0x61, 0x58, 0x42, 0x6f, 0x5a, 0x58, 0x4a, 0x30, 0x5a, 0x58, 0x68, 0x30, 0x49, 0x6a, 0x6f, 0x69, 0x62, 0x55, 0x46, 0x73, 0x65, 0x47, 0x6f, 0x32, 0x64, 0x7a, 0x49, 0x7a, 0x64, 0x6c, 0x70, 0x6b, 0x63, 0x6b, 0x52, 0x57, 0x4e, 0x6d, 0x31, 0x76, 0x65, 0x46, 0x4a, 0x46, 0x4e, 0x48, 0x49, 0x7a, 0x62, 0x45, 0x31, 0x70, 0x64, 0x6a, 0x42, 0x70, 0x4d, 0x47, 0x31, 0x69, 0x53, 0x33, 0x49, 0x31, 0xa, 0x4d, 0x6c, 0x68, 0x4a, 0x64, 0x31, 0x6b, 0x76, 0x64, 0x47, 0x35, 0x77, 0x61, 0x6b, 0x4e, 0x45, 0x65, 0x43, 0x39, 0x4f, 0x63, 0x54, 0x52, 0x46, 0x5a, 0x6a, 0x6b, 0x72, 0x5a, 0x58, 0x42, 0x75, 0x57, 0x6b, 0x30, 0x76, 0x57, 0x46, 0x46, 0x6c, 0x56, 0x47, 0x78, 0x76, 0x63, 0x47, 0x35, 0x58, 0x56, 0x33, 0x4a, 0x69, 0x64, 0x56, 0x64, 0x77, 0x65, 0x6b, 0x35, 0x42, 0x65, 0x6d, 0x4d, 0x79, 0xa, 0x64, 0x48, 0x4d, 0x78, 0x52, 0x58, 0x4a, 0x5a, 0x4e, 0x46, 0x5a, 0x31, 0x63, 0x7a, 0x42, 0x58, 0x62, 0x6e, 0x42, 0x77, 0x54, 0x44, 0x6c, 0x77, 0x61, 0x46, 0x68, 0x42, 0x59, 0x32, 0x74, 0x43, 0x4d, 0x6b, 0x70, 0x5a, 0x52, 0x6e, 0x52, 0x4f, 0x53, 0x57, 0x35, 0x31, 0x61, 0x6c, 0x41, 0x30, 0x65, 0x6a, 0x6c, 0x53, 0x57, 0x55, 0x68, 0x77, 0x61, 0x6d, 0x74, 0x31, 0x65, 0x56, 0x70, 0x45, 0xa, 0x56, 0x48, 0x68, 0x77, 0x57, 0x45, 0x74, 0x75, 0x53, 0x47, 0x46, 0x6b, 0x65, 0x46, 0x46, 0x70, 0x56, 0x33, 0x64, 0x79, 0x61, 0x6c, 0x46, 0x6c, 0x65, 0x6d, 0x46, 0x79, 0x64, 0x6b, 0x77, 0x7a, 0x4d, 0x6b, 0x4d, 0x79, 0x52, 0x58, 0x42, 0x46, 0x54, 0x30, 0x59, 0x33, 0x53, 0x56, 0x4e, 0x34, 0x54, 0x55, 0x39, 0x4c, 0x59, 0x55, 0x6c, 0x4f, 0x4d, 0x57, 0x4a, 0x45, 0x53, 0x57, 0x68, 0x43, 0xa, 0x4d, 0x55, 0x70, 0x54, 0x54, 0x55, 0x35, 0x44, 0x4d, 0x31, 0x42, 0x54, 0x4d, 0x55, 0x30, 0x72, 0x64, 0x45, 0x63, 0x30, 0x4f, 0x47, 0x46, 0x55, 0x63, 0x30, 0x64, 0x54, 0x56, 0x47, 0x35, 0x61, 0x63, 0x31, 0x45, 0x39, 0x50, 0x53, 0x4a, 0x39, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x45, 0x44, 0x20, 0x43, 0x4f, 0x53, 0x49, 0x47, 0x4e, 0x20, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x20, 0x4b, 0x45, 0x59, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}).Return(nil)
	sdk.On("ArtifactDownloadByteArray", cidsdk.ArtifactDownloadByteArrayRequest{
		ID: "my-project|oci-image|image.txt",
	}).Return([]byte(`docker.io/hello-world`), nil)
	sdk.On("ArtifactDownloadByteArray", cidsdk.ArtifactDownloadByteArrayRequest{
		ID: "my-project|oci-image|digest.txt",
	}).Return([]byte(`sha256:c38b49430bfe198766f03d135e58af0803588f89a26759d0c90d00f3a2aafde0`), nil)
	sdk.On("ExecuteCommand", cidsdk.ExecuteCommandRequest{
		Command: `cosign sign --key "/my-project/.tmp/private.key" --recursive -a "repo=https://github.com/cidverse/normalizeci.git" -a "commit_hash=abcdef123456" docker.io/hello-world@sha256:c38b49430bfe198766f03d135e58af0803588f89a26759d0c90d00f3a2aafde0`,
		WorkDir: "/my-project",
		Env: map[string]string{
			"COSIGN_PASSWORD": "123456",
		},
	}).Return(&cidsdk.ExecuteCommandResponse{Code: 0}, nil)

	action := SignAction{Sdk: sdk}
	err := action.Execute()
	assert.NoError(t, err)
}

func TestContainerSignKeyless(t *testing.T) {
	sdk := test.Setup(t)
	sdk.On("ModuleAction", mock.Anything).Return(testdata.ModuleDockerfile(), nil).Run(func(args mock.Arguments) {
		arg := args.Get(0).(*SignConfig)
		arg.CosignMode = "KEYLESS"
	})
	sdk.On("ArtifactDownloadByteArray", cidsdk.ArtifactDownloadByteArrayRequest{
		ID: "my-project|oci-image|image.txt",
	}).Return([]byte(`docker.io/hello-world`), nil)
	sdk.On("ArtifactDownloadByteArray", cidsdk.ArtifactDownloadByteArrayRequest{
		ID: "my-project|oci-image|digest.txt",
	}).Return([]byte(`sha256:c38b49430bfe198766f03d135e58af0803588f89a26759d0c90d00f3a2aafde0`), nil)
	sdk.On("ExecuteCommand", cidsdk.ExecuteCommandRequest{
		Command: `cosign sign --recursive -a "repo=https://github.com/cidverse/normalizeci.git" -a "commit_hash=abcdef123456" docker.io/hello-world@sha256:c38b49430bfe198766f03d135e58af0803588f89a26759d0c90d00f3a2aafde0`,
		WorkDir: "/my-project",
		Env: map[string]string{
			"COSIGN_EXPERIMENTAL": "1",
		},
	}).Return(&cidsdk.ExecuteCommandResponse{Code: 0}, nil)

	action := SignAction{Sdk: sdk}
	err := action.Execute()
	assert.NoError(t, err)
}
