package gitlab

import (
	"fmt"
	"path"
	"strings"

	cidsdk "github.com/cidverse/cid-sdk-go"
	"github.com/cidverse/cidverseutils/pkg/cihelper"
)

type PublishAction struct {
	Sdk cidsdk.SDKClient
}

type PublishConfig struct {
	GitLabToken string `json:"gitlab_token"  env:"GITLAB_TOKEN"`
}

func (a PublishAction) Execute() (err error) {
	cfg := PublishConfig{}
	ctx, err := a.Sdk.ProjectAction(&cfg)
	if err != nil {
		return err
	}

	// changelog
	changelogFile := path.Join(ctx.Config.TempDir, "github.changelog")
	downloadChangelogErr := a.Sdk.ArtifactDownload(cidsdk.ArtifactDownloadRequest{
		Type:       "changelog",
		Name:       "github.changelog",
		TargetFile: changelogFile,
	})

	// options
	var releaseOpts []string
	if downloadChangelogErr == nil { // use changelog generated by pipeline, default to GitHub auto generated release notes if not available
		releaseOpts = append(releaseOpts, fmt.Sprintf("-F %q", changelogFile))
	} else {
		releaseOpts = append(releaseOpts, fmt.Sprintf("--notes %q", "no release notes"))
	}

	// support for self-hosted instances
	host, err := cihelper.GetHostFromGitRemote(ctx.Env["NCI_REPOSITORY_REMOTE"])
	if err != nil {
		return err
	}

	// create release
	_ = a.Sdk.Log(cidsdk.LogMessageRequest{Level: "info", Message: "creating gitlab release", Context: map[string]interface{}{"host": host, "name": ctx.Env["NCI_COMMIT_REF_NAME"]}})
	releaseResult, err := a.Sdk.ExecuteCommand(cidsdk.ExecuteCommandRequest{
		Command: fmt.Sprintf(`glab release create %q %s`, ctx.Env["NCI_COMMIT_REF_NAME"], strings.Join(releaseOpts, " ")),
		WorkDir: ctx.ProjectDir,
		Env: map[string]string{
			"GITLAB_HOST":     host,
			"GITLAB_API_HOST": host,
			"GITLAB_TOKEN":    ctx.Env["GITLAB_TOKEN"],
		},
	})
	if err != nil {
		return err
	} else if releaseResult.Code != 0 {
		return fmt.Errorf("gitlab release creation failed, exit code %d", releaseResult.Code)
	}

	return nil
}
